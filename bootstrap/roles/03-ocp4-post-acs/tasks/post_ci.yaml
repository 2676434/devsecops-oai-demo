- name: Get ACS central route
  kubernetes.core.k8s_info:
    kind: Route
    api_version: route.openshift.io/v1
    namespace: stackrox
    name: central
  register: r_stackrox_central_route
  retries: 10
  delay: 20

- name: Store central route as a fact
  set_fact:
    f_stackrox_central_addr: "{{ r_stackrox_central_route.resources[0].spec.host }}"

- name: Create ACS Console Link
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'acs-console-link.yml.j2') }}"

- name: Create API token for access from Pipeline to ACS
  uri:
    url: "https://{{ f_stackrox_central_addr }}/v1/apitokens/generate"
    body: '{"name":"pipelines-ci-token","role":null,"roles":["Continuous Integration"]}'
    method: POST
    user: admin
    password: "{{ stackrox_central_admin_password }}"
    body_format: json
    force_basic_auth: true
    validate_certs: no
  register: r_ci_token_json

- name: Get API token from response
  set_fact:
    f_rox_api_token: "{{ r_ci_token_json.json.token }}"
      
      
- name: Create ACS API Token secret for using in the pipelines
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      stringData:
        rox_central_endpoint: "{{ f_stackrox_central_addr }}:443"
        rox_api_token: "{{ f_rox_api_token }}"
      kind: Secret
      metadata:
        name: roxsecrets
        namespace: "{{ ocp4_demo_pipeline_namespace }}"
      type: Opaque

- name: Generate pipeline token "oc -n cicd create token pipeline"
  command: "oc -n cicd create token pipeline"
  register: pipeline_token_output

- name: Get pipeline token from output
  set_fact:
    pipeline_token: "{{ pipeline_token_output.stdout }}"
#
### FIXME: roxsecrets ####
#- name: Generate pipeline token using kubernetes.core.k8s module "oc -n cicd create token pipeline"
#  kubernetes.core.k8s:
#    state: present
#    api_version: v1
#    kind: token
#    namespace: cicd
#    name: pipeline
#  register: pipeline_token

- name: Creating ACS Integration with the Openshift Internal Registry
  uri:
    url: "https://{{ f_stackrox_central_addr }}/v1/imageintegrations"
    body: "{{ lookup('template', 'templates/ocp_registry_acs.yml.j2') }}"
    method: POST
    user: admin
    password: "{{ stackrox_central_admin_password }}"
    body_format: json
    force_basic_auth: true
    validate_certs: no
   # temporarily accept 400s due to ROX-6699
    status_code: 200, 400

- name: Creating ACS Integration with the Harbor Registry
  uri:
    url: "https://{{ f_stackrox_central_addr }}/v1/imageintegrations"
    body: "{{ lookup('template', 'templates/harbor_registry_acs.yml.j2') }}"
    method: POST
    user: admin
    password: "{{ stackrox_central_admin_password }}"
    body_format: json
    force_basic_auth: true
    validate_certs: no
    # temporarily accept 400s due to ROX-6699
    status_code: 200, 400
